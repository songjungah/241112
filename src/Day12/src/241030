추상 클래스
* 목적
1) 설계 (추상 메서드 - 설계 도구)
2) 하위 클래스의 자원 공유


★ 상속은 무조건 인스턴스 메서드!

※ @Override
: 메서드를 오버라이드(재정의)할 때 사용하는 애너테이션
: 주로 부모 클래스의 메서드를 자식 클래스에 다시 정의할 때 사용


인터페이스 > 설계 목적
1. 인터페이스란?
- 설계를 하기 위한 목적으로 만들어진 클래스

★ API(Application Programming Interface)
   - 애플리케이션 개발 설계 명세

2. 인터페이스 문법
interface 인터페이스명 {
   추상 메서드... (= 설계도)
}

3. 클래스에서 인터페이스 구현하기
class 하위 클래스 implements 인터페이스 {

}
   - 구현이 더 중요한 목적이므로 extends 보다는 implements를 사용한다!
   - 동작 방식은 상속과 동일!

4. 인터페이스 구현과 형변환(다형성)
5. 인터페이스의 요소 살펴보기
   1) 인터페이스 상수
   2) 디폴트 메서드 - JDK7
   3) 정적 메서드 - 항상 가능
   4) private 메서드 - JDK9

   ★ 메서드 -> 추상 메서드로 인식 -> 자동으로 컴파일러가 public abstract 추가
   ★ 변수 -> 정적 상수 -> 자동으로 컴파일러가 public static final을 추가

인터페이스 활용하기
1. 한 클래스가 여러 인터페이스를 구현하는 경우
   - 인터페이스 분리 원칙 (설계 목적에 맞게 범주화해서 분리!)
   - 주문
      1) 판매자
      2) 구매자

2. 두 인터페이스의 디폴트 메서드가 중복되는 경우
3. 인터페이스 상속하기

interface 인터페이스 extends 부모 인터페이스, 부모 인터페이스 ... {

}

* MouseListener의 기본 구현 클래스 - MouseAdapater
   - 디자인 패턴, Adapter 패턴



내부 클래스
1. 인스턴스 내부 클래스 : 객체의 자원 = 인스턴스 - 객체 생성과 관련이 있음
   - 인스턴스 자원(인스턴스 변수, 인스턴스 메서드)의 성격과 비슷
   - 외부 클래스가 객체가 되어야만 내부 클래스로 객체 생성이 가능!

2. 정적 내부 클래스 : 객체랑 상관없이 쓸수있는 처음부터 변수, 함수 - 클래스 명으로 직접 접근
   - 정적 자원(정적 변수, 정적 메서드)의 성격과 비슷!
   - 외부 클래스의 객체가 되는 조건과 관계 없음!
   - 그 자체로 클래스, 외부 클래스와 상관 없이 객체 생성 가능!

★★★ 3. 지역 내부 클래스 : 지역 변수와 관련이 있음
   - 지역 변수와 비슷한 성격
   - 메서드 내부에 정의된 클래스

