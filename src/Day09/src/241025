this 예약어
   지역변수
   - 모든 인스턴스 메서드의 지역 변수
   - 생성된 객체의 주소 값을 가지고 있는 지역 변수
   - 객체의 자원을 인스턴스 메서드 내부에서 사용할 목적!
   - 객체를 접근할 수 있는 주소가 필요!
   - 메서드 안에 정의된 인스턴스 변수, 인스턴스 메서드의 출처가 명확한 경우 생략 가능!

   메서드
   - 클래스 내부에 정의된 생성자 함수를 의미
   - this() : 클래스 내부에 정의된 기본 생성자
   - this(...) : 클래스 내부에 정의된 매개변수가 있는 생성자
   - 주로 생성자 간에 사용이 많다!
   - 생성자의 가장 첫번째 줄에 적용 가능!


static 변수
   - static(정적인) : 고정된
   - 정적 변수 > 정적 메모리와 관련!
   - ★데이터 영역에서 공간을 할당
   - 자료형 앞에 static 예약어를 추가
   - 정적인 방법으로 접근하는 것이 권장 사항 > 객체 생성과 상관없이 접근 - 클래스명으로 접근 가능
   - 클래스 변수라고도 함

static 메서드
   - 정적 변수와 동일한 성격
   - 처음부터 함수!
   - 객체 생성없이 처음부터 호출 가능한 함수
   - 클래스 메서드라고도 함
   - this 지역 변수는 없음 > 객체 생성과 관련성이 없기 때문!
   - 객체의 자원은 접근 불가!
   - ★인스턴스 메서드 내에서는 처음부터 변수, 처음부터 함수인 정적 변수, 정적 메서드는 접근 가능!

※ 참고) 정적인 <--> 동적인
1) 정적 메모리
   - 프로그램 시작과 동시에 한번 할당 되면 애플리케이션이 종료 되면 해제
   - 데이터 영역 메모리

2) 동적 메모리
   - 실행 과정 중에 생성과 소멸을 반복하는 메모리
   - 스택 영역 메모리(함수 전용 메모리), 힙 영역 메모리(객체 전용 메모리)


★변수의 유효범위
1. 지역변수
   - 함수가 호출될 때 스택에서 할당받고, 호출이 끝나면 제거되는 변수
   - 함수 지역 내에서만 유효한 변수

2. 멤버변수(인스턴스 변수)
   - 객체 생성시 힙에서 할당 받고, 주소 참조가 더이상 없으면 GC(가비지 콜렉터)가 해제

3. static 변수
   - 처음부터 변수!
   - 애플리케이션 시작부터 데이터 영역에서 할당, 애플리케이션 종료시 해제

static 응용 - 싱글톤 패턴
   - 객체를 생성하지 않고 처음부터 사용 가능한 자원(처음부터 변수, 처음부터 함수)
   - java.lang.Math : 수학적 편의 기능 제공하는 편의 클래스 > 객체 생성 목적X, 전부 static으로만 정의되어 있음
   - static의 문제점 : 필요한 static 메서드와 static 변수는 일부인데, 모두 자원을 차지하고 있음 > 자원낭비!

   * 싱글톤 패턴 : 필요할 때 하나의 객체만 생성하고 공유하는 패턴
      - 기능만 담당하는 클래스의 경우 (ex) 회원 가입 기능, 로그인 기능
      - 하나의 객체만 생성해도 기능을 수행하는데 문제 X

      * 만드는 방법
      1) 기본 생성자 private 접근 제어자로 변경 : 하나의 객체만 만들게 통제
      2) 클래스 내부에서 정적 변수 선언
      3) 정적 변수로 생성된 객체를 외부에서 접근 가능하도록 정적 메서드를 정의
      4) 정적 메서드 정의시(getlnstance), 정적 변수가 null 일때만 객체를 1번 생성, 공유

      ※ 참고) Student : 학생 / Product : 상품 > 각각 독립적으로 다른 값을 가지는 객체 일 때 -> 여러개 생성 O


※ 참고
   - 함수의 코드 정의 > 변경X : 상수와 유사한 성격 / 코드가 하나만 있으면 된다!
   - 함수는 힙 영역에 생성 X > 데이터 영역 메모리에 생성 O
   - 데이터 영역 메모리(★변하지 않는 자원) : 코드 / 메서드 영역 / 상수 / 정적 변수 / 리터럴 상수(재료가 되는 수)




상속
1. 상속이란?

2. 클래스의 상속
3. 클래스 상속 문법

class 자식 클래스 extends 부모 클래스 {

}

5. super


매서드 재정의
1. 메소드 재정의
2. 묵시적 형변환과 메서드 재정의
3. 가상메서드

