[ 소프트웨어/프로그램 개발시 사용되는 반복작업/패턴 ]

★ MVC 디자인 패턴
    1. 목적
    - 사용목적 : 프로젝트를 구성할 때 복잡한 코드와 class 파일들을 MVC패턴의 따라 구성하는 방법
    - 사용하는 이유 : 구분을 하지 않아도 코드를 읽어보면 무슨 코드인지 알수 있다.
                  : 협업에서는 다양한 사람들이 동일한 프로젝트를 하면서 서로 다른 코드를 작성하는데 이걸 구분하는 방법
    - 하나의 파일에서 작성된 코드를 목적/사용 에 따라 MVC 구성요소 로 분리

    2. 장점 : 유지보수, 협업, 단일기능(모듈) 구성 [ 모듈 단위 : 추후에 다른 기능과 커스텀이 쉬움 ]
    ex) 완제품 : 피규어 / 모듈 : 레고 조각

    3. 단점 : 클래스 / .java 파일 / 패키지 등 파일구분이 많아서 파일 관리가 어렵다.

    4. 구성 종류 > 각 구성별로 역할의 책임이 존재한다.
    * MVC 패턴
    * MVC2 패턴

    - M(Model) : 모델 > 데이터 관리 담당
        1) DTO ( Data Transfer Object = 데이터 이동 객체 )
        2) VO ( Value Object = 값 객체, setter 함수가 존재하지 않는 읽기모드 객체 )
        3) DAO ( Data Access Object = 데이터 접근 객체, 주로 데이터베이스 접근 객체 )

    - V(View) : 뷰(화면) > 입출력 담당 (HTML/CSS/JS 프론트엔드)
        1) [ 콘솔기준 ] : scanner, print 만 사용하는 구역

    - C(Controller) : 제어 > Model 과 View 사이에서의 제어와 전달 담당
        1) view 로 부터 전달받은 데이터를 Model(Dao) 에게 전달하는 역활
        2) 데이터 유효성 검사 ( 데이터 안전 검사 )



★ 싱글(혼자)톤(객체) 디자인 패턴
   - 프로젝트내 하나의 객체만 가질 수 있도록 만드는 패턴

   1. 목적 : 무의미한 객체가 많아지면 객체 관리가 힘들고, 굳이 객체가 많이 필요 없을 때 사용
            즉, 객체가 1개만 필요할 때 사용

   2. 장점 : 객체가 1개만 존재하므로 관리가 편리하고, ★객체 정보 공유가 가능하다.

   3. 단점 : 메모리 효율성이 좋지 않을 수 있다.

   4. 구성 방법

      1) 싱글톤을 만들 클래스에서 현재 클래스의 private static 객체를 생성한다.
      2) 생성자를 외부로부터 차단한다. 생성자를 private 만든다.
      3) private static 싱글톤 객체를 외부로부터 접근할 수 있도록 싱글톤 getter 함수를 만든다.

      public class 클래스명 {
              private static 클래스명 싱글톤변수명 = new 클래스명();
              private 클래스명(){ }
              public static 클래스명 get싱글톤변수명(){
                    return this.싱글톤 변수명;
          }
      }
