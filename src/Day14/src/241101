예외 처리하기
1. try ~ catch문
   // 예외가 발생할 가능성이 있는 코드
try {

} catch (예외 객체..) {
   // 예외 발생시 처리할 코드
}

※ 참고)
   예외 발생
	throw 예외객체;

   예외, 오류 -> 원인을 확인을 하는 것이 중요!

2. try - catch - finally 문
   - 자원을 소비하는 객체 > FileInputStream, FileOutputStream, Connection, PrepareStateStatement ...
   - 자원 해제 -> 애플리 케이션 종료시에 해제
   - 서버? 종료 X -> 자원해제를 하지 않으면 메모리 부족 현상 발생
   - 자원해제를 적절하게 해야한다. (close( )...)

* 웹서버
   - 서버(Server) : 서비스를 제공하는 주체
   - 클라이언트(Client) : 서비스가 필요한 주체

try {

} catch(...) {

} finally {
   // 예외가 발생하든 안하는 항상 실행되는 코드
   / return 하더라도 코드가 실행
}

3. try - with - resources문
   - JDK7 에서 추가
   - 자원 해제를 자동

try ( 해제할 자원 객체;
	해제할 자원 객체 ...) {
      // 예외가 발생할 가능성이 있는 코드

} catch(예외 객체...) {

}


★★★ 예외처리 미루기

1. 예외 처리를 미루는 throw 사용하기
   - 메서드를 호출 하는 쪽에서 예외처리 전가
   - 전가시키는 예외에 대해서 명시(throws)
     메서드 매개면수 뒤쪾에 throw 전가할 예외작성
   - Exception 을 상속 받은 경우 (RuntimeException 이 없는 경우)

※ 참고)
   스프링 프레임워크
   SQLException -> DataAccessException 으로 변환
   (Exception)	(RuntimeException)

   - 현장에서는 유연성이 중요!
   - RuntimeException 하위 클래스 형태로 사용자 정의 예외를 많이 정의

2. 다중 예외처리
3.



★ 컴파일러가 자동으로 코드를 추가해주는 부분
1) import java.lang.*
2) extends java.lang.Object -> 모든 클래스는 Object 하위 클래스
3) 기본 생성자
4) super( ) -> 상속에 필요함
5) 인터페이스 메서드 앞에 public abstract
6) 인터페이스 정의된 변수, public static final
7) 지역 내부 클래스, 지역 변수의 상수화, final


java.lang 패키지
   - 기본적으로 많이 사용하는 클래스들이 포함