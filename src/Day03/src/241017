연산자
- 항과 연산자

* 10 + 20 = 30
1) 항 : 연산에 사용되는 값 (ex) 10, 20
- 값1 : 단항 연산
- 값2 : 이항 연산
- 값3 : 삼항 연산

2) 연산자 : 연산에 사용되는 기호 (ex) +, =


1. 대입 연산자 [ ★연산자의 우선 순위가 가장 낮음 ]
   int num = 10;
   : 오른쪽 값을 왼쪽의 변수에 저장(대입)

   int result = 10 + 20 + 30;
   : 오른쪽에 연산 결과가 result 변수에 대입(저장)

2. 부호 연산자 [ 대표적인 단항 연산 ]
   1) +
   2) - : 부호 반전 (양수>음수 / 음수>양수)

3. 산술 연산자
   1) +
   2) -
   3) * : 곱하기
   4) / : 나누기
   5) % : 나머지 연산자
          - 규칙성 : 균등 배분
	나누는 수보다 작은 수가 반복됨
★ *, /, % 순서가 +, - 보다 높음
★ ( ) : 연산자 우선 순위 강제 적용

4. 증가감소 연산자
   - 단항 연산
   - 1씩 증가(++) / 1씩 감소(--)
   - num++; / ++num; / num--; / --num;
   >> 차이점 : 값을 대입시에 확인 가능
   ex) int num2 = num++; > 1.대입 2. 연산(++)
        int num2 = ++num; > 1. 연산(++) 2. 대입

5. 관계(비교) 연산자
   >, <, >=, <=
   == : 같다 [ 값의 같음 여부X, 자원이 동일한지(자원의 주소가 동일한지) ]
   != : 다르다

   - 연산 결과 : 참(true) / 거짓(false) > boolean 논리값
   - 조건식에서 많이 사용됨
   ※ 참고) 조건식 : 참, 거짓을 판별하는 식

   ex) 10이상이고 100이하인가? > 논리 연산자 필요!

6. 논리 연산자
- 연산에 필요한 값? 논리값 (true, false)
   1) AND 연산 - &&
    - 모두 참일 때 참으로 결과가 나오는 연산
    - true && true -> true (O)
    - false && true -> false
    - true && false -> false
    - false && false -> false

   2) OR 연산 - ||
    - 하나라도 참이면 결과가 참으로 나오는 연산
    - true || true -> true (O)
    - true || false ->  true (O)
    - false || true -> true (O)
    - false || false -> false

   3) NOT 연산 - !
    - 부정 : true > false / false > true

★ 비교 연산의 우선 순위는 논리 연산보다 높다 !

* 연산 값 : 논리값
* 결과 : 논리값(참, 거짓), 판별
- 단락회로 평가
   : 논리 연산자의 연산은 판별이 목적! / 이미 판별된 상황이면 연산 종료

7. 복합 대입 연산자
   : 대입 연산자(=) + 다른 연산자 [ 산술 연산자 > +, -, *, /, %..., 비트연산자 ]

   int num = 10;
   num = num + 2;  -> num += 2;	// 2씩 증가
   num = num * 2;  -> num *= 2;	// 2씩 곱하기
   num = num / 2;   -> num /= 2;	// 2씩 나누기

8. 조건 연산자(삼항조건연산자)
   - 조건식 : 참, 거짓을 판별하는 연산식(참, 거짓)
   - 비교 연산, 논리 연산

조건식 ? 참일 때 : 거짓일 때;
   1항       2항        3항

※ 참고) String : 문자열, "단어...";
   1) + : 숫자 - 숫자 더하기 10 + 10 -> 20
   2) 문자열(String) : 문자열 결합
       ex) "가나" + "다라" -> "가나다라"
   >> 연산자 오버로드

9. 연산자 우선순위
 대입 =, +=,... <  ...  <  논리 연산  <  비교 연산  <  ...  < 괄호 (), []




조건문
* 조건식 : 참 거짓 판별 연산식 (비교, 논리 연산)

* if (조건식){
   // 조건식이 참일 때 실행되는 코드
}

* if(조건식){
   // 조건식1이 참일 때 실행되는 코드
}else{
   // 조건식1 거짓 + 조건식2 참
}

* if (조건식1){
   // 조건식1 이 참일 때 실행되는 코드
}else if (조건식2){
   // 조건식1 거짓 + 조건식2 참
}else if (조건식3){
   // 조건식1 거짓 + 조건식2 거짓 + 조건식3 참
}else{
   // 모든 조건이 거짓일 때
}


