* 참조 자료형 : 할당 받은 공간의 크기 모두 동일
- 자원을 찾아 가기 위한 위치에 대한 정보(주소)
- 주소를 담을 수 있는 공간의 크기면 적당(4바이트)

* 기본 자료형 : 원재료
- byte, short, int, long



생성자
- 클래스명과 동일한 명칭의 함수
- 객체를 생성해주는 역활
- 반환값은 객체를 접근 할 수 있는 주소값
- 주소값은 매우 중요! 변경X
- 반환값 타입 정의X, return 예약어 사용 불가

* 클래스 로더 -> 클래스 -> Class 객체 생성

1. 디폴트 생성자(기본 생성자)
	- 클래스에 생성자 메서드가 정의된 것이 없으면 -> 컴파일러가 자동 추가
		public 클래스명() {}

2. 생성자 만들기
3. 생성자 오버로드
	함수의 이름 - 함수의 시그니쳐

	패키지명 + 클래스명 + 반환값 + 함수명 + 매개변수 정의 + 예외 전가

	함수의 시그니쳐가 동일 -> 함수의 중복 정의 -> 오류
	함수의 시그니쳐가 동일 X -> 함수명이 같아도 다른 함수를 정의한 것

	메서드 오버로드 : 동일한 함수 이름으로 매개변수 정의와, 반환값을 달리 여러개 정의하는 방법


* 정보 은닉
- 멤버 변수에 직접 값을 대입하는 것 -> 통제불가 : 사용을 지양(멤버 변수의 접근 제어자(private)
- 멤버 변수의 값을 확인할 수 있는 접근 가능한 메서드 추가
(set 변수명)



1. 접근 제어자 정리
- public :  다른 패키지에서도 접근이 가능
- protected : 동일 패키지에서 접근 가능(default) + 외부 패키지에 있는 클래스에서 상속을 받으면
클래스 내부에서 접근 가능(private)
- default : 접근 제어자를 명시 X - 동일 패키지에서 접근 가능
- private : 클래스 내부에서만 접근 가능

public > protected > default > private

※참고 ) 다른 패키지에 있는 클래스를 사용하려면 import
	import 패키지명.클래스명;


2. get(), set() 메서드

3. this 예약어
- 모든 인스턴스 메서드의 지역 변수
