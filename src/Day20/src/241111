컬렉션 프레임워크

* java.util.Arrays : 배열의 편의 기능 모음
   - String toString(T[ ] array) : 배열 요소들의 값을 문자열로 출력
   - String deepToString(T[ ] ....) : 다차원 배열의 요소들의 값을 문자열로 출력
   - boolean equals(T[ ] ...) : 1차원 배열의 요소들의 값을 비교	// equals and hashCode
   - boolean deepEquals(T[ ] ...) : 다차원 배열일 때 값을 비교

   - void sort(T[ ] <E extends Comparable> ...) : 기본 정렬 기준으로 정렬
   - void sort(T[ ] <E extends Comparable> ..., Comparator ...) : Comparator - 대안 정렬 기준

   - List<T> asList(T ...) : 요소를 나열해서 불변하는 리스트를 만들 때

* java.util.Collections : 컬렌션의 편의 기능 모음
   - void shuffle(Collection ...) : 컬렉션의 요소를 랜덤하게 섞어줄 때
   - void sort(Collection <E extends Comparable> ...) : 기본 정렬 기준으로 정렬
   - void sort(Collection <E extends Comparable> ..., Comparator ...) : Comparator - 대안정렬 기준




람다식(Lamda expression)

1. 람다식이란?
- 메서드(함수)를 하나의 식으로 표현

   1) 함수형 프로그래밍
      - 일등함수 : 변수와 함수를 동등하게 취급
      : 함수는 값으로 사용될 수 있다!
      ( 자바는 함수가 값으로 사용될 수 없다! > 진짜 함수, 실행 코드 )

      - 함수란?
      : 하나의 기능(단일 기능) / 사용자 정의 기능, 필요에 의해서 생성하고 다쓰면 버리는 일회용 객체

      - 함수는 값으로 사용
      : 매개변수	// 사용자 정의 기능
      : 반환값	// 클로져

   2) 자바는 함수는 값으로 사용 불가
      - 인터페이스의 객체가 되는 조건을 이용
      - 형식을 단순화


2. 람다식 문법 살펴보기
   1) 접근 제어자, 반환값 타입, 함수명을 생략
   2) 매개변수 정의 부분과 함수 구현 부분({ }) 사이에 -> 추가
   3) 매개변수의 자료형 생략 가능
   4) 구현코드가 한 줄일 때는 { ... } 생략 가능, return 예약어도 생략 해야된다
   5) 최대한 짧게 쓰는 방향(변수명도 한 글자로 하는 것이 권장)


3. 람다식 사용하기


4. 함수형 인터페이스(Function Interface)
@FunctionalInterface
   - 함수형 인터페이스 / 함수형 프로그래밍을 위한 인터페이스
   - 단일 기능을 정의하기 위한 목적
   - 추상 메서드를 한개만 정의할 수 있고 이 형식을 체크


5. 함수형 인터페이스 타입의 매개변수와 반환 타입


★6. java.util.function 패키지 > 암기!!!!!
   - 많이 쓰는 함수의 유형을 인터페이스로 정의

--- 매개변수가 1개 ---
   1) 매개변수 X, 반환값 O
   - Supplier<R>
	R get( );

   2) 매개변수 1, 반환값 X
   - Consumer<T>
	void accept(T t);

   3) 매개변수 1, 반환값 O
   - Function<T, R>
	R apply(T t);

   4) 매개변수 1, 반환값(boolean) : 논리값(true, false) - 판별식!
   - Predicate<T>
	boolean test(T t);


★ 매개변수가 2개 > Bi 접두어

   1) 매개변수 2개, 반환값 X
   - BiConsumer<T, U>
	void accept(T t, U u);

   2) 매개변수 2개, 반환값 O
   - BiFunction<T, U, R>
	R apply(T t, U u);

   3) 매개변수 2개, 반환값 boolean
   - BiPredicate<T, U>
	boolean test(T t, U u);


★ 매개변수와 반환값 자료형이 동일한 경우
   1) 매개변수 1개
   - UnarryOperator<T>
	T apply(T t);

   2) 매개변수 2개
   - BinaryOperator<T>
	T apply(T t1, T t2);


★ 기본 자료형 함수형 인터페이스 : 연산의 효율성을 위해서(연산은 기본 자료형으로 하는게 가장 좋다!)
   1) 기본자료형 Function<R> : 매개변수 - 기본자료형, 반환값이 R
   - intFunction<R>
	R apply(int t);

   2) To 기본자료형 Function<T> : 매개변수 - T, 반환값이 기본자료형
   - ToDoubleFunction<T>
	double applyAsDouble(T t);

   3) 기본자료형1 To 기본자료형2 Function : 매개변수 - 기본자료형1, 반환값 - 기본자료형2
   - intToLongFunction
	long applyAsLong(int t);


7. Function의 합성과 Predicate의 결합
   - 함수형 프로그래밍 이론

   A.andThen(B) -> A와 B를 결합해서 새로운 함수
   B.compose(A) -> A와 B를 결합해서 새로운 함수


8. 메서드 참조

