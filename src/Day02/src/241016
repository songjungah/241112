변수가 저장되는 공간의 특성, 자료형

1. 변수와 메모리

* 자료형
- 기본 자료형 : 숫자를 저장할 수 있는 변수의 자료형

1. 정수형 : 소수점이 없는 수
- byte : 1바이트 : -2^7 ~ 2^7 - 1 / -128 ~ 127
- short : 2바이트(16bit) : -2^15 ~ 2^15 - 1
- int : 4바이트(32bit) : -2^31 ~ 2^31 -1
- long : 8바이트(64bit) : -2^63 ~ 2^63 -1

2. 실수형 : 소수점이 있는 수
- float : 4바이트
- double : 8바이트

3. 문자형
- char : 2~3바이트 > '' 를 통해 표현 (ex) '가'
- 양의 정수

* 문자표
- ASCII 코드
- 유니코드 (2~3바이트) > 주로 3바이트 사용
- 3바이트 문자표 : UTF-8

4. 논리형
- boolean : 1바이트
- true(참) / false(거짓)

- 참조 자료형 : 주소를 가지고 값을 접근하는 변수의 자료형(주소 참조)
※ 참고 : 자료 / 데이터 / 값


2. 기본 자료형의 종류

* 상수와 리터널
1. 상수 선언하기
- 상수 : 변하지 않는 수 (constant)
- final 예약어 변수명 앞에 추가 / final - 변경 불가
- 이름 명명 관례
> 대문자로 작성
> 단어와 단어 사이 _로 구분

(ex) final int MAX_NUMBER = 10;

2. 리터럴(literal)
- 리터럴 상수
- 재료가 되는 수(문자, 숫자, 논리값)
- 같은 재료 > 하나만 생성(상수)
※ 참고 > == : 자원의 주소 비교

* 가장 효율적인 정수 자료형 int / 실수는 double


★ 형변환 - 자료형간 변환
1. 묵시적 형변환
- 자동 형변환
(1) 작은 자료형 -> 큰 자료형
(2) 정수형(덜 정밀한 수) -> 실수형(더 정밀한 수)
★ byte(1) -> short(2) / char(3~4) -> int(4) -> long(8) -> float(4) -> double(8)
(3) 연산시에도 자동 형변환 : 연산은 같은 자료형만 가능 -> 연산을 위해 자동 형변환이 이루어짐

2. 명시적 형변환 (=강제 형변환)
- 데이터의 유실이 발생할 가능성이 있는 경우 > 자동 형변환 X
- 명시적으로 형변환 의사 표현


★ 변수 : 공간의 이름
★ 공간 : 메모리





연산자
- 항과 연산자

* 10 + 20 = 30
1) 항 : 연산에 사용되는 값 (ex) 10, 20
- 값1 : 단항 연산
- 값2 : 이항 연산
- 값3 : 삼항 연산

2) 연산자 : 연산에 사용되는 기호 (ex) +, =


1. 대입 연산자 [ ★연산자의 우선 순위가 가장 낮음 ]
   int num = 10;
   : 오른쪽 값을 왼쪽의 변수에 저장(대입)

   int result = 10 + 20 + 30;
   : 오른쪽에 연산 결과가 result 변수에 대입(저장)

2. 부호 연산자 [ 대표적인 단항 연산 ]
   1) +
   2) - : 부호 반전 (양수>음수 / 음수>양수)

3. 산술 연산자
   1) +
   2) -
   3) * : 곱하기
   4) / : 나누기
   5) % : 나머지 연산자
★ *, /, % 순서가 +, - 보다 높음
★ ( ) : 연산자 우선 순위 강제 적용

4. 증가감소 연산자
5. 관계(비교) 연산자
6. 논리 연산자
- 단락회로 평가
7. 복합 대입 연산자





