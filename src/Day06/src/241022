객체지향 프로그래밍1

1. 객체 지향 프로그래밍과 클래스
* 객체(Object)
- 사물, 대상 전부
- 속성 : 정의, 상태 -> 변수
- 행위 : -> 함수

1) 객체와 객체 지향 프로그래밍
2) 생활 속에서 객체 찾아보기


2. 클래스 살펴보기
- 클래스 : 객체를 만들기 위한 설계 명세서
ex) 요리 레시피 : 클래스 / 재료 : 변수 정의 / 만드는 법 : 함수 정의 / 만든 떡볶이 : 객체

1) 클래스를 정의하는 문법
class 클래스명 {
	변수정의
	함수정의
}

2) 클래스 이름을 짓는 규칙
: Orderinfo > Order + info
- 파스칼 표기법

3) 클래스의 속성을 구현하는 멤버변수
- 클래스에 변수 정의 -> 멤버 변수(정의)
- 클래스에 정의된 함수 -> 메서드

변수.속성명;
변수.함수명(...);


3. 클래스와 인스턴스
* 인스턴스(instance) - 실체 : 실제로 존재한다
- 생성된 객체
- 클래스의 변수 정의(실제 존재X) -> 객체에 메모리에 생성(실제 존재O)
[ 정의에 불과한 클래스 명세 -> 메모리에 생성된 객체(실체) ]

- 인스턴스 == 객체
- 인스턴스 : 생성 과정에 초점
- 객체 : 결과 초점


메서드
1. 함수란?
- 기능
- 객체에 정의된 함수? : 메서드

2. 함수의 입력과 반환
3. 함수 정의하기

반환값 자료형 함수명 (매개변수) {
	// 실행될 코드 정의

	return 반환값;
}
1) 함수이름
2) 매개변수
3) return 예약어와 반환형

4. 함수 호출하고 값 반환하기
: 호출 -> 함수명(값, ...);

5. 매개변수 살펴보기

6. 함수 호출과 스택 메모리
- 스택 메모리 : 임시 메모리 -> 함수가 연산을 수행할 때만 공간을 할당, 작업 완료(return) -> 제거

※참고
1) 스택(stack) 구조
- 가장 마지막에 투입된 자료 : 가장 먼저 나옴
- 가장 처음에 투입된 자료 : 가장 나중에 나옴

2) 큐(queue) 구조

- 함수에 정의된 변수 -> 스택에서 활성화, 스택에서 제거

== : 주소 비교

null : 값이 없음

★ main 함수 : 프로그램 시작 함수

★ 자료형
- 기본 자료형 : 숫자를 저장하는 변수의 자료형
	     :  숫자의 크기에 따라서 다양한 자료형 존재(byte, short, int, long)
- 참조 자료형 : 자원의 주소를 참조해서 접근하는 변수의 자료형
	     : 참조 변수 > 자원의 주소
	     : 기본 자료형 외 모든 자료형


