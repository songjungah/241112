내부 클래스
   - 클래스 안에 정의된 클래스
   - 외부 클래스 : 내부 클래스가 포함된 클래스

1. 인스턴스 내부 클래스 : 객체의 자원 = 인스턴스 - 객체 생성과 관련이 있음
   - 인스턴스 자원(인스턴스 변수, 인스턴스 메서드)의 성격과 비슷
   - 외부 클래스가 객체가 되어야만 내부 클래스로 객체 생성이 가능!

2. 정적 내부 클래스 : 객체랑 상관없이 쓸수있는 처음부터 변수, 함수 - 클래스 명으로 직접 접근
   - 정적 자원(정적 변수, 정적 메서드)의 성격과 비슷!
   - 외부 클래스의 객체가 되는 조건과 관계 없음!
   - 그 자체로 클래스, 외부 클래스와 상관 없이 객체 생성 가능!

★★★ 3. 지역 내부 클래스 : 지역 변수와 관련이 있음
   - 지역 변수와 비슷한 성격
   - 메서드 내부에 정의된 클래스
   - ★ 지역 변수의 상수화 > 값을 제거하지 않을 목적!


   - 추상 클래스와 인터페이스가 객체가 생성될 수 있는 조건!
   1) 지역 내부(함수 내부)에서 객체를 생성하는 경우
   2) 멤버 변수(인스턴스 변수, 정적 변수, 상수, 정적 상수)에서 객체를 생성하는 경우
★3) 미구현된 메서드를 구현 함으로써 > 아주 많이 사용!




※ Terminal > Command Prompt 열기
※ javac 파일명.java -encoding utf-8 > dir /w
예외처리
1. 오류와 예외
   1) 오류(Error) : 시스템의 오류, JVM 오류.. : 통제 불가 오류

   2) 예외(Exception) : 코드 상의 오류 : 통제 가능한 오류
		  - 버그

2. 예외 클래스의 종류
Throwable

Error	Exception


* Exception
   - Exception을 바로 상속 받은 예외 클래스
   ex) java.io.IOException / 파일을 읽을 때, 쓸 때(FileInputStream, FileOutputStream)

	java.io.FileNotFoundException

	- 예외가 있든 없든 처리가 안되어 있으면 컴파일 X
	- 예외의 체크는 컴파일시 체크, 예외가 있으면 컴파일 X
	- 예외가 발생하든 안하든 반드시 적절한 예외 처리가 필요한 예외
	- ★엄격한 예외, 형식을 매우 중시!

* RuntimeException 을 중간에 상속 받은 예외 클래스
   - Runtime : 실행
   ex) java.lang.ArithmethicExxception : 0으로 나눌 때 발생

   - 예외가 발생하더라도 컴파일 O, class 파일 생성
   - 예외의 체크는 실행 중 체크, 실행이 되려면? class 파일 필요(컴파일은 된다..)
   - 유연한 예외, 형식은 X

* 예외가 발생하면 프로그램 중단! > 프로그램 중단을 막기 위한 조치
   - 예외처리의 목적 : 예외가 발생시 적절한 조치 -> 서비스 중단을 막는 것


예외 처리하기
1. try ~ catch문
   // 예외가 발생할 가능성이 있는 코드
try {

} catch (예외 객체..) {
   // 예외 발생시 처리할 코드
}